export type DifficultyLevel = 'Easy' | 'Medium' | 'Hard';
export type QuestionType = 'MCQ' | 'MMCQ' | 'Numerical' | 'MSQ';
export type UserRole = 'Admin' | 'Student' | 'Super Admin';

export interface QuestionTags {
  exam_type: string;
  subject: string;
  chapter: string;
  topic: string;
  difficulty_level: DifficultyLevel;
  question_type: QuestionType;
  source?: string;
}

export interface Question {
  _id: string;
  _id: string;
  question_text: string;
  option_a: string;
  option_b: string;
  option_c: string;
  option_d: string;
  correct_answer: string;
  explanation: string;
  tags: Tags;
  usedInQuizzes?: string[];
}

export interface ApiResponse {
  success: boolean;
  data: {
    questions: Question[];
    pagination: {
      currentPage: number;
      totalPages: number;
      totalQuestions: number;
      questionsPerPage: number;
    };
  };
}

export interface QuizSection {
  id: string;
  title: string;
  name: string;
  questions: Question[];
  marks_per_question: number;
  negative_marks: number;
  timerEnabled: boolean;
  duration?: number;
  total_questions?: number;
  isAutogenerated?: boolean;
}

export interface Quiz {
  id: string;
  title: string;
  sections: QuizSection[];
  total_duration: number;
  total_marks: number;
  createdAt: string;
  updatedAt: string;
  instructions?: string[];
  header?: string[];
  footer: string[];
  watermark?: {
    enabled: boolean;
    text?: string;
  };
}

export interface ExtendedQuiz extends Quiz {
  footer: string[];
}

export interface TagSystem {
  id: string;
  name: string;
  tags: string[];
  exam_types: string[];
  subjects: Record<string, string[]>;
  chapters: Record<string, string[]>;
  topics: Record<string, string[]>;
  difficulty_levels: DifficultyLevel[];
  question_types: QuestionType[];
  sources: string[];
}

export interface AutoGenerateSettings {
  subject?: string;
  chapterDistribution?: ChapterDistribution[];
  difficultyDistribution?: Record<DifficultyLevel, number>;
  typeDistribution?: Record<QuestionType, number>;
  count?: number;
  tags?: Record<string, string[]>;
  difficulty?: DifficultyLevel[];
  types?: QuestionType[];
}

export interface ChapterDistribution {
  chapter: string;
  percentage: number;
  count: number;
  topics: TopicDistribution[];
}

export interface TopicDistribution {
  topic: string;
  percentage: number;
  count: number;
  questionCount: number;
}

export interface User {
  id: string;
  name: string;
  email: string;
  role: UserRole;
  profilePicture?: string;
}

export interface InvitationRequest {
  email: string;
  role: UserRole;
  name: string;
}

export interface InvitationResponse {
  success: boolean;
  message: string;
}

export interface PaginationData {
  currentPage: number;
  totalPages: number;
  totalQuestions: number;
  questionsPerPage: number;
}

// Import tag types
import { TagSystem, Tags, TagHierarchy, TagUploadResponse } from './tagTypes';

// Re-export tag types
export { TagSystem, Tags, TagHierarchy, TagUploadResponse };

export interface ApiResponse {
  success: boolean;
  data: {
    questions: Question[];
    pagination: PaginationData;
  };
  error?: string;
  message?: string;
}

export interface QuizAttempt {
  _id: string;
  quiz: string;
  user: string;
  answers: Record<string, string[]>;
  score: number;
  maxScore: number;
  timeSpent: number;
  completed: boolean;
  correctAnswers: number;
  incorrectAnswers: number;
  unattemptedAnswers: number;
  submittedAt: Date;
}